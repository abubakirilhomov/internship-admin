import React, { useState, useMemo } from "react";
import { Trash2, Edit, ArrowUpCircle } from "lucide-react";
import { toast } from "react-toastify";
import { api } from "../../utils/api";

const InternsTable = ({ interns, onEdit, onDelete, rules, refresh }) => {
  const [selectedIntern, setSelectedIntern] = useState(null);
  const [showDeleteModal, setShowDeleteModal] = useState(null);
  const [showUpgradeModal, setShowUpgradeModal] = useState(null);
  const [selectedGrade, setSelectedGrade] = useState("strongJunior");

  // üîπ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤
  const branches = useMemo(() => {
    const list = interns
      .map((i) => i.branch)
      .filter((b) => b && b.name)
      .reduce((acc, branch) => {
        if (!acc.find((x) => x._id === branch._id)) acc.push(branch);
        return acc;
      }, []);
    return list;
  }, [interns]);

  // üîπ –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ñ–∏–ª–∏–∞–ª—É
  const [selectedBranch, setSelectedBranch] = useState("all");

  // üîπ –§–∏–ª—å—Ç—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–Ω–æ–≤
  const filteredInterns = useMemo(() => {
    if (selectedBranch === "all") return interns;
    return interns.filter((i) => i.branch?._id === selectedBranch);
  }, [interns, selectedBranch]);

  const handleDeleteConfirm = (id) => {
    onDelete(id);
    setShowDeleteModal(null);
  };

  const handleUpgrade = async () => {
    try {
      await api.interns.upgrade(showUpgradeModal, selectedGrade);
      toast.success(`üéâ –ì—Ä–µ–π–¥ –ø–æ–≤—ã—à–µ–Ω –¥–æ "${selectedGrade}"`);
      setShowUpgradeModal(null);
      refresh();
    } catch (err) {
      toast.error(err.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –≥—Ä–µ–π–¥–∞");
    }
  };

  const gradeOptions = [
    "junior",
    "strongJunior",
    "middle",
    "strongMiddle",
    "senior",
  ];

  return (
    <div className="overflow-x-auto">
      {/* üîπ –§–∏–ª—å—Ç—Ä –ø–æ —Ñ–∏–ª–∏–∞–ª—É */}
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-xl font-bold">–°—Ç–∞–∂—ë—Ä—ã</h2>
        <select
          className="select select-bordered w-64"
          value={selectedBranch}
          onChange={(e) => setSelectedBranch(e.target.value)}
        >
          <option value="all">–í—Å–µ —Ñ–∏–ª–∏–∞–ª—ã</option>
          {branches.map((b) => (
            <option key={b._id} value={b._id}>
              {b.name}
            </option>
          ))}
        </select>
      </div>

      <table className="table table-zebra w-full">
        <thead>
          <tr>
            <th>–ò–º—è</th>
            <th>–§–∞–º–∏–ª–∏—è</th>
            <th>–§–∏–ª–∏–∞–ª</th>
            <th>–£—Ä–æ–∫–∏</th>
            <th>–ì—Ä–µ–π–¥</th>
            <th className="text-center">–î–µ–π—Å—Ç–≤–∏—è</th>
          </tr>
        </thead>
        <tbody>
          {filteredInterns.length === 0 ? (
            <tr>
              <td colSpan="6" className="text-center py-6 text-gray-500">
                –ù–µ—Ç —Å—Ç–∞–∂—ë—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
              </td>
            </tr>
          ) : (
            filteredInterns.map((intern) => (
              <tr
                key={intern._id}
                className="hover:bg-base-200 transition"
                onClick={() => setSelectedIntern(intern)}
              >
                <td>{intern.name}</td>
                <td>{intern.lastName}</td>
                <td>{intern.branch?.name || "‚Äî"}</td>
                <td>{intern?.lessonsVisited?.length || 0}</td>
                <td className="capitalize">{intern.grade}</td>
                <td
                  className="flex justify-center gap-2"
                  onClick={(e) => e.stopPropagation()}
                >
                  <button
                    onClick={() => onEdit(intern)}
                    className="btn btn-sm btn-primary"
                    title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                  >
                    <Edit className="h-4 w-4" />
                  </button>
                  <button
                    onClick={() => setShowUpgradeModal(intern._id)}
                    className="btn btn-sm btn-success"
                    title="–ü–æ–≤—ã—Å–∏—Ç—å –≥—Ä–µ–π–¥"
                  >
                    <ArrowUpCircle className="h-4 w-4" />
                  </button>
                  <button
                    onClick={() => setShowDeleteModal(intern._id)}
                    className="btn btn-sm btn-error"
                    title="–£–¥–∞–ª–∏—Ç—å"
                  >
                    <Trash2 className="h-4 w-4" />
                  </button>
                </td>
              </tr>
            ))
          )}
        </tbody>
      </table>

      {/* --- Upgrade Modal --- */}
      {showUpgradeModal && (
        <div className="modal modal-open">
          <div className="modal-box">
            <h3 className="font-bold text-lg mb-4">–ü–æ–≤—ã—Å–∏—Ç—å –≥—Ä–µ–π–¥</h3>
            <p className="mb-2">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å:</p>
            <select
              className="select select-bordered w-full mb-4"
              value={selectedGrade}
              onChange={(e) => setSelectedGrade(e.target.value)}
            >
              {gradeOptions.map((g) => (
                <option key={g} value={g}>
                  {g}
                </option>
              ))}
            </select>
            <div className="modal-action">
              <button
                className="btn btn-ghost"
                onClick={() => setShowUpgradeModal(null)}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button className="btn btn-success" onClick={handleUpgrade}>
                –ü–æ–≤—ã—Å–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}

      {/* --- Delete Modal --- */}
      {showDeleteModal && (
        <div className="modal modal-open">
          <div className="modal-box">
            <h3 className="font-bold text-lg mb-4">–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞–∂—ë—Ä–∞?</h3>
            <p className="mb-4">–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.</p>
            <div className="modal-action">
              <button
                className="btn btn-ghost"
                onClick={() => setShowDeleteModal(null)}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                className="btn btn-error"
                onClick={() => handleDeleteConfirm(showDeleteModal)}
              >
                –£–¥–∞–ª–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default InternsTable;
